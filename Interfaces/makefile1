# SELECT TARGET OPERATING SYSTEM 
ifeq($(UNAME_S), Linux)
	OS=Lin
	UNAME_M := $(shell uname -m)
	ifeq ($(UNAME_M), x86_64)
		ARCH=64
	else
		ARCH=32
	endif
endif

DEBUG=0

ROOTDIR_PATH= .
BUILDDIR_PATH= $(ROOTDIR_PATH)/build
SRCDIR_PATH= $(ROOTDIR_PATH)/Src
INCDIR_PATH= $(ROOTDIR_PATH)/Inc
OBJDIR_PATH= $(ROOTDIR_PATH)/Obj
EXE=uart


CC_PATH= 
CC= $(CC_PATH)gcc
CC_FLAGS =$(DBUG_FLAGS) -Wall -Wextra $(BIT32_FLAGS) -I$(INC_DIR)


ifeq ($(DEBUG), 1)
	CC_FLAGS := $(CC_FLAGS) -g
	BUILDDIR_PATH := $(BUILDDIR_PATH)/debug
else
	BUILDDIR_PATH := $(BUILDDIR_PATH)/release
endif


ifeq ($(BIT), 32)
	CC_FLAGS := $(CC_FLAGS) -m32
endif


ifeq ($(OS), WINDOWS)
	EXE := $(EXE).exe
	SERIAL = WinSerial.c
else
	EXE := $(EXE).out
	SERIAL = LinSerial.c
endif


VPATH := $(SRCDIR_PATH)

SRCS = main.c $(SERIAL)	
OBJS = $(patsubst %.c $(OBJDIR_PATH)/%.o, $(SRCS))


.PHONY: all clean build

all : clean makdir build
makdir:
	mkdir -p $(OBJ_DIR)
	mkdir -p $(EXE_DIR)

build:	$(OBJS)
	$(CC) $(CC_FLAGS) $(OBJS) -o $(EXE_DIR)/$(EXE) 


# Automatic Variables
# $@ - Contains target file name
# $< - Contains 1st dependency file name
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c		#Generic Rule for *.o
		$(CC) -c $(CC_FLAGS) $< -o $@

		
clean :
	rm -f $(OBJS) $(EXE)
